{"title":"How to Build a Solution in Logseq, Obsidian, etc.","markdown":{"yaml":{"title":"How to Build a Solution in Logseq, Obsidian, etc.","aliases":["how_to_build_a_solution_in_logseq_et_al"],"date":"2023-01-06","description":"","draft":true,"publishDate":null,"slug":"how_to_build_a_solution_in_logseq_et_al"},"headingText":"What is this?","containsRefs":false,"markdown":"\n\n> Simple is nearly always better. But if it's going to be complicated, then make sure the problem is worth the complexity. A great deal of time is wasted creating complex solutions to relatively unimportant problems.\n> - James Clear\n\n> A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work. You have to start over, beginning with a working simple system.\n> - John Gall\n\nCRM in Tana\nhttps://www.youtube.com/watch?v=N4YXh0ynmy0\nThis seemed insane that he'd gotten an hour into doing this and hadn't saved a single person\n\nHello fellow PKM user, both new and old alike!\n\n\nI've been dabbling in PKMs for a few years now, and I've noticed a bit of a pattern in the current wave of PKM content creation that holds regardless of tool, from org mode to Obsidian to Logseq. \n\nMainly, there seems to be a fascination with sharing how solutions are built in side of Tools for Thought... but they all focus on the scaffolding and the setup! They're presented as this single point in time of structure formation, and even if they speak to an iterative process, those steps are largely left out of the explanation. \n\nWell no longer! I'm writing this post (mostly) not to teach you how to handle recpies in a PKM, but instead to teach you how to build *any* solution for yourself in a PKM.\n\nTo be clear, this is a **hard** problem. PKM's are so powerful these days that you *could* do almost anything. That makes the paralyzing analysis of what you *should* be doing all the more terrifying. Much easier to copy what seems to be working from someone else.\n\nFortunately, we deal with this in the tech industry all the time! Computer software is fundamentally a blank canvas, and a literal infinite number of things could be created. As a result, there are some methods from the tech world I'll share with you today on how to build your very own solutions in your PKM of choice.\n\nI'll use LogSeq for my example, but any PKM will work.\n\nTo start, the key steps.\n\n## The Key Steps\n\n### 1 - Think of what *you* want\n\nThe most important letter in PKM is **P**, because everyone thinks about the world differently in their head. As a result, the problems we face, while probably similar to others, will have their quirks unique to us given our strengths and weaknesses we each bring to the table. So the first step is to think hard very about a given problem.\n\nWhat are your goals for this thing you're thinking about doing in a PKM? What would it feel like when it's finished and working smoothly? What do you do today for this problem instead that works fairly well? What do you do today that doesn't work well? \n\nAll of this is good information to capture on paper/a screen somewhere so you can keep refining the ideas as you go. Don't assume you just have it all in your head. Write. it. down.\n\n### 2 - Map the goals into user journeys\n\nWe have something in software development called user journeys. These are single sentences that tend to be phrased as...\n\n> As a [type of person], I want [to do/to have something]\n\nWith your goals above in mind, start crystalizing the things you want your solution to do in these sentences. It'll be a little forced at first, but the whole point is to translate the pieces of your problem you want solved into smaller, discrete features. Building the list this way lets you tackle each thing one by one once you start building.\n\nAn interesting thing you may notice after creating a few of these is that you can think of yourself as multiple types of person, creating mini-personalities that your solution needs to cater to. For example, maybe you're a perfectionist, but you're also lazy, and you're also away from a laptop a lot, and you get interrupted pretty regularly... these are all great personas to capture, because they all have different features they want (and sometimes want different ways to solve the same problem).\n\nAs such, the user journeys don't have to all be coherent. You're allowed want multiple, contradictory things at once. The point of this exercise is to make explicit the things you want so you can think through what the solution personalized to *you* should look like. Building things is all about trade-offs, and making all the conflicting desires clear makes it much easier to judge trade-offs later.\n\nUser journeys should encapsulate something that delivers value to the persona listed. So, \"As an organized person, I want to have a schema for my data\" isn't good enough. You need something like \"As a lazy person, my CRM should prompt me to fill in info I should have even if I don't have it yet.\" It's a whole feature, not a stepping stone you might need to do to make a feature possible.\n\nGood User Journeys:\n- As a distracted person, I want a way to capture an idea as fast as possible without interrupting what I'm doing\n- As a forgetful person, I want to be reminded when to reach out to friends and say hello\n- As an interative improver, I want to see what I've already tried as I attempt a new thing\n\nBad User Journeys:\n- As an organizer, I want to define the right schema for my contacts\n- As a developer, I want to build a CRM\n- As a solution designer, I want to finish designing a solution for storing recipes\n\nWhen you've got a bunch written down, order them from most important to least important. Perfection doesn't matter, just get a rough ordering. This effectively becomes your TODO list.\n\n### 3 - Relentlessly focus on satisfying one user journey after the other until you're through\n\nNow that we've itemized our goals into user journeys, and then prioritized them by importance, was so we could tackle one piece at a time. There's no need to boil the ocean by doing everything from the start. Do something discrete, that solves a problem for a part of yourself, and then add on from there.\n\nDoing one thing at a time is freeing, by eliminating a bunch of extraneous concerns that might pop into your head. If you're anything like me, distractions are always at hand, and this focus brings momentum to the project.\n\nYou don't have to complete every User Journey of course. Some may turn out to be impossible. That's OK. Mark it as attempted and abandoned and go to the next one.\n\nAlso, don't feel tied to your original ordering. Work on one at a time until a journey done or abandoned, but you can re-arrange the list at any time either according to your need or even just your whims. This is all to help you, not to hurt you.\n\nThat's pretty much it for the general steps. That said, there are some things I encourage you to keep in mind as you build things in your CRM...\n\n## Key things to keep in mind\n\n### Do less\n\nThis is *extremely* important. The less you do, the less you have to build. The less you build, the less you maintain. \n\nThere are no bugs in things you decide not to build.\n\nSo do not presume your solution needs to be complicated. In fact, always to strive to make it as simple and barebones as you can get away with.\n\nRemember, the goal is to *do the stuff your PKM enables*, not to organize your life the \"correct\" way to be organized.\n\n### Use native tooling whenever possible\n\nMost PKMs support plugins to some degree. Many of these are amazing and borderline magical. \n\nDO NOT DEPEND ON THEM for your solution if you can possibly avoid it.\n\nYou're already depending on a PKM to make your solution, it's not wise to add another dependency on a tool that isn't guaranteed to keep up to date (and is more likely to change) unless you absolutely have to.\n\nAnd change is a big deal in making a solution in a PKM. The plugin environment everywhere is rapidly evolving at a frankly ludicrous pace. Things that work one way today might work very differently tomorrow.\n\nBe absolutely sure that risk is worth it if you choose to depend on a plugin. Does it really have to be in a Kanban board? Can I add a metadata field or two and achieve the same effect? If I work really hard on a particular query, does it do pretty much the same thing for this specific case?\n\n### It will feel weird, full of warts, and *yours*\n\nDo not be ashamed of it feeling hacked together! This is a *good* thing!\n\nThat means it hews as close as possible to your needs, with nothing for anyone else!\n\nEmbrace the bad! \n\nAnything worth doing is worth doing poorly!\n\n### There is no \"right\" answer\n\nSimilar to the above, feel free to get inspiration from others, but be very wary of thinking that anyone else has the *exact* solution to your problem.\n\nSure, it could happen. But odds are it completely works for them, and will work 90% for you. \n\nGood artists copy. Great artists steal. Incorporate others' ideas into your own work, but don't overvalue it compared to what you bring to the table.\n\nI love Eleanor Konik in the Obsidian community, because she is extremely open about borrowing ideas from other places (Johnny Decimal, Maps of Content, etc.), and then not following them to perfection because they don't work for this or that thing she needs to do.\n\n### There are some great filler practices for tooling gaps\n\nWe're talking a lot about building a solution in a PKM here, which is a form of tool. However, there are some great filler practices that can make up for some tricky tool deficiencies.\n\nFor example, I do a morning and evening journal. If I tack on a little checklist to the journal prompt, I now have an escape hatch for any number of processes that are otherwise very tricky to implement in some PKM's.\n\nDo you really need to write a date scoped query to pull the not-so-recently updated contacts in your CRM, or can you just check every night to see if any have fallen too out of date?\n\n\n### Crappily finished is way better than perfect in your head\n\nZe Frank has an old video about brain crack that still haunts me. The gist is this: an idea in your head can be addictive. It can feel good to think about it, and how perfect it can be, without every actually implementing it. \n\nBut you have to resist that. A bad version that works is infinitely better than a perfect version that's only in your imagination.\n\n### Focus on making small, positive units of value, then grow\n\nYou won't stick with pain to eventually get to something that COULD be good.\n\nStarting with the important stuff, finishing a useful unit of work, and then going to the next is the best way to build this up. We're going for an incremental approach... to get better over time.\n\nStart with the simple systems that work. If you're building a CRM, just having a page for each contact with a tag is good enough to start. *Then* you can worry about templates. And then links. And so on. \n\n### You need to be radically honest and non-judgmental of yourself\n\nYou will have things you do and things you don't do\n\n### Listen to, and lean into your idiosyncrasies.\nYou're an audience of 1! Use that privileged knowledge!\n\n## An example: Recipes in PKM\n\n### DONE Start doing recipes\n:logbook:\n  CLOCK: [2022-08-17 Wed 07:54:43]--[2022-08-17 Wed 07:54:44] =>  00:00:01\n:END:\nDONE How to handle recipe part?\nI don't think this needs to be super formal\nSome recipes will have a list of ingredients\nOthers will just have descriptions like the Scrambled Eggs\nDONE How to handle implementation notes?\nDONE I could make an example iteration template\nDONE Should I link all the ingredients together for recipe discovery?\n:logbook:\n\t  CLOCK: [2022-08-12 Fri 19:02:33]--[2022-08-12 Fri 19:02:33] =>  00:00:00\n:END:\nThere are probably better apps for this\nThe goal of this exercise is mostly to capture my notes on each attempt and tweaks for improvement\n### Start with goals\nWhat do I want out of keeping recipes in my PKM?\nPersonally, I care a lot about iteration\nHow do I know it's working?\nHow would I know it's broken?\n### Move on to CUJ's, if not interspersing them with goals\nAs a ____, I want to blank\n### Then start implementing one at a time\nHow should we implement this?\nTags? Single notes page? Multiple notes pages? Daily Note? Templates?","srcMarkdownNoYaml":"\n\n> Simple is nearly always better. But if it's going to be complicated, then make sure the problem is worth the complexity. A great deal of time is wasted creating complex solutions to relatively unimportant problems.\n> - James Clear\n\n> A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work. You have to start over, beginning with a working simple system.\n> - John Gall\n\nCRM in Tana\nhttps://www.youtube.com/watch?v=N4YXh0ynmy0\nThis seemed insane that he'd gotten an hour into doing this and hadn't saved a single person\n\nHello fellow PKM user, both new and old alike!\n\n## What is this?\n\nI've been dabbling in PKMs for a few years now, and I've noticed a bit of a pattern in the current wave of PKM content creation that holds regardless of tool, from org mode to Obsidian to Logseq. \n\nMainly, there seems to be a fascination with sharing how solutions are built in side of Tools for Thought... but they all focus on the scaffolding and the setup! They're presented as this single point in time of structure formation, and even if they speak to an iterative process, those steps are largely left out of the explanation. \n\nWell no longer! I'm writing this post (mostly) not to teach you how to handle recpies in a PKM, but instead to teach you how to build *any* solution for yourself in a PKM.\n\nTo be clear, this is a **hard** problem. PKM's are so powerful these days that you *could* do almost anything. That makes the paralyzing analysis of what you *should* be doing all the more terrifying. Much easier to copy what seems to be working from someone else.\n\nFortunately, we deal with this in the tech industry all the time! Computer software is fundamentally a blank canvas, and a literal infinite number of things could be created. As a result, there are some methods from the tech world I'll share with you today on how to build your very own solutions in your PKM of choice.\n\nI'll use LogSeq for my example, but any PKM will work.\n\nTo start, the key steps.\n\n## The Key Steps\n\n### 1 - Think of what *you* want\n\nThe most important letter in PKM is **P**, because everyone thinks about the world differently in their head. As a result, the problems we face, while probably similar to others, will have their quirks unique to us given our strengths and weaknesses we each bring to the table. So the first step is to think hard very about a given problem.\n\nWhat are your goals for this thing you're thinking about doing in a PKM? What would it feel like when it's finished and working smoothly? What do you do today for this problem instead that works fairly well? What do you do today that doesn't work well? \n\nAll of this is good information to capture on paper/a screen somewhere so you can keep refining the ideas as you go. Don't assume you just have it all in your head. Write. it. down.\n\n### 2 - Map the goals into user journeys\n\nWe have something in software development called user journeys. These are single sentences that tend to be phrased as...\n\n> As a [type of person], I want [to do/to have something]\n\nWith your goals above in mind, start crystalizing the things you want your solution to do in these sentences. It'll be a little forced at first, but the whole point is to translate the pieces of your problem you want solved into smaller, discrete features. Building the list this way lets you tackle each thing one by one once you start building.\n\nAn interesting thing you may notice after creating a few of these is that you can think of yourself as multiple types of person, creating mini-personalities that your solution needs to cater to. For example, maybe you're a perfectionist, but you're also lazy, and you're also away from a laptop a lot, and you get interrupted pretty regularly... these are all great personas to capture, because they all have different features they want (and sometimes want different ways to solve the same problem).\n\nAs such, the user journeys don't have to all be coherent. You're allowed want multiple, contradictory things at once. The point of this exercise is to make explicit the things you want so you can think through what the solution personalized to *you* should look like. Building things is all about trade-offs, and making all the conflicting desires clear makes it much easier to judge trade-offs later.\n\nUser journeys should encapsulate something that delivers value to the persona listed. So, \"As an organized person, I want to have a schema for my data\" isn't good enough. You need something like \"As a lazy person, my CRM should prompt me to fill in info I should have even if I don't have it yet.\" It's a whole feature, not a stepping stone you might need to do to make a feature possible.\n\nGood User Journeys:\n- As a distracted person, I want a way to capture an idea as fast as possible without interrupting what I'm doing\n- As a forgetful person, I want to be reminded when to reach out to friends and say hello\n- As an interative improver, I want to see what I've already tried as I attempt a new thing\n\nBad User Journeys:\n- As an organizer, I want to define the right schema for my contacts\n- As a developer, I want to build a CRM\n- As a solution designer, I want to finish designing a solution for storing recipes\n\nWhen you've got a bunch written down, order them from most important to least important. Perfection doesn't matter, just get a rough ordering. This effectively becomes your TODO list.\n\n### 3 - Relentlessly focus on satisfying one user journey after the other until you're through\n\nNow that we've itemized our goals into user journeys, and then prioritized them by importance, was so we could tackle one piece at a time. There's no need to boil the ocean by doing everything from the start. Do something discrete, that solves a problem for a part of yourself, and then add on from there.\n\nDoing one thing at a time is freeing, by eliminating a bunch of extraneous concerns that might pop into your head. If you're anything like me, distractions are always at hand, and this focus brings momentum to the project.\n\nYou don't have to complete every User Journey of course. Some may turn out to be impossible. That's OK. Mark it as attempted and abandoned and go to the next one.\n\nAlso, don't feel tied to your original ordering. Work on one at a time until a journey done or abandoned, but you can re-arrange the list at any time either according to your need or even just your whims. This is all to help you, not to hurt you.\n\nThat's pretty much it for the general steps. That said, there are some things I encourage you to keep in mind as you build things in your CRM...\n\n## Key things to keep in mind\n\n### Do less\n\nThis is *extremely* important. The less you do, the less you have to build. The less you build, the less you maintain. \n\nThere are no bugs in things you decide not to build.\n\nSo do not presume your solution needs to be complicated. In fact, always to strive to make it as simple and barebones as you can get away with.\n\nRemember, the goal is to *do the stuff your PKM enables*, not to organize your life the \"correct\" way to be organized.\n\n### Use native tooling whenever possible\n\nMost PKMs support plugins to some degree. Many of these are amazing and borderline magical. \n\nDO NOT DEPEND ON THEM for your solution if you can possibly avoid it.\n\nYou're already depending on a PKM to make your solution, it's not wise to add another dependency on a tool that isn't guaranteed to keep up to date (and is more likely to change) unless you absolutely have to.\n\nAnd change is a big deal in making a solution in a PKM. The plugin environment everywhere is rapidly evolving at a frankly ludicrous pace. Things that work one way today might work very differently tomorrow.\n\nBe absolutely sure that risk is worth it if you choose to depend on a plugin. Does it really have to be in a Kanban board? Can I add a metadata field or two and achieve the same effect? If I work really hard on a particular query, does it do pretty much the same thing for this specific case?\n\n### It will feel weird, full of warts, and *yours*\n\nDo not be ashamed of it feeling hacked together! This is a *good* thing!\n\nThat means it hews as close as possible to your needs, with nothing for anyone else!\n\nEmbrace the bad! \n\nAnything worth doing is worth doing poorly!\n\n### There is no \"right\" answer\n\nSimilar to the above, feel free to get inspiration from others, but be very wary of thinking that anyone else has the *exact* solution to your problem.\n\nSure, it could happen. But odds are it completely works for them, and will work 90% for you. \n\nGood artists copy. Great artists steal. Incorporate others' ideas into your own work, but don't overvalue it compared to what you bring to the table.\n\nI love Eleanor Konik in the Obsidian community, because she is extremely open about borrowing ideas from other places (Johnny Decimal, Maps of Content, etc.), and then not following them to perfection because they don't work for this or that thing she needs to do.\n\n### There are some great filler practices for tooling gaps\n\nWe're talking a lot about building a solution in a PKM here, which is a form of tool. However, there are some great filler practices that can make up for some tricky tool deficiencies.\n\nFor example, I do a morning and evening journal. If I tack on a little checklist to the journal prompt, I now have an escape hatch for any number of processes that are otherwise very tricky to implement in some PKM's.\n\nDo you really need to write a date scoped query to pull the not-so-recently updated contacts in your CRM, or can you just check every night to see if any have fallen too out of date?\n\n\n### Crappily finished is way better than perfect in your head\n\nZe Frank has an old video about brain crack that still haunts me. The gist is this: an idea in your head can be addictive. It can feel good to think about it, and how perfect it can be, without every actually implementing it. \n\nBut you have to resist that. A bad version that works is infinitely better than a perfect version that's only in your imagination.\n\n### Focus on making small, positive units of value, then grow\n\nYou won't stick with pain to eventually get to something that COULD be good.\n\nStarting with the important stuff, finishing a useful unit of work, and then going to the next is the best way to build this up. We're going for an incremental approach... to get better over time.\n\nStart with the simple systems that work. If you're building a CRM, just having a page for each contact with a tag is good enough to start. *Then* you can worry about templates. And then links. And so on. \n\n### You need to be radically honest and non-judgmental of yourself\n\nYou will have things you do and things you don't do\n\n### Listen to, and lean into your idiosyncrasies.\nYou're an audience of 1! Use that privileged knowledge!\n\n## An example: Recipes in PKM\n\n### DONE Start doing recipes\n:logbook:\n  CLOCK: [2022-08-17 Wed 07:54:43]--[2022-08-17 Wed 07:54:44] =>  00:00:01\n:END:\nDONE How to handle recipe part?\nI don't think this needs to be super formal\nSome recipes will have a list of ingredients\nOthers will just have descriptions like the Scrambled Eggs\nDONE How to handle implementation notes?\nDONE I could make an example iteration template\nDONE Should I link all the ingredients together for recipe discovery?\n:logbook:\n\t  CLOCK: [2022-08-12 Fri 19:02:33]--[2022-08-12 Fri 19:02:33] =>  00:00:00\n:END:\nThere are probably better apps for this\nThe goal of this exercise is mostly to capture my notes on each attempt and tweaks for improvement\n### Start with goals\nWhat do I want out of keeping recipes in my PKM?\nPersonally, I care a lot about iteration\nHow do I know it's working?\nHow would I know it's broken?\n### Move on to CUJ's, if not interspersing them with goals\nAs a ____, I want to blank\n### Then start implementing one at a time\nHow should we implement this?\nTags? Single notes page? Multiple notes pages? Daily Note? Templates?"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","theme":["darkly","../../custom.scss"],"title-block-banner":true,"title":"How to Build a Solution in Logseq, Obsidian, etc.","aliases":["how_to_build_a_solution_in_logseq_et_al"],"date":"2023-01-06","description":"","draft":true,"publishDate":null,"slug":"how_to_build_a_solution_in_logseq_et_al"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}