{"title":"Challenges Showing Text From a Simple JS Function in Logseq","markdown":{"yaml":{"title":"Challenges Showing Text From a Simple JS Function in Logseq","slug":"challenges-showing-text-from-a-simple-js-function-in-logseq","date":"2023-03-03T18:52:04.600Z","categories":["Technology","Personal Knowledge Management"],"description":"","summary":"","aliases":["/challenges-showing-text-from-a-simple-js-function-in-logseq"]},"headingText":"Option 1: Use Templates","containsRefs":false,"markdown":"\n\nThere are some open source projects that are plain, simple, and describe well what they do. `curl` is the classic example (along with most Linux utilities), but [File Converter](https://file-converter.org/) is another. It does what it does, it doesn't do what it doesn't. \n\nAnd then, there is Logseq.\n\nAll I wanted to do is dynamically create some text from a javascript function that's different every day. I *feel* this is doable in there somewhere, but I'm absolutely stumped trying to connect the dots from A to B to make it happen.\n\n<!-- more -->\n\nLet's consider the options:\n\n\nThe templating language in Logseq is pretty solid. I'm a particularly heavy user when it comes to creating my morning, evening, weekly, and monthly journal prompts. \n\nBut that was also what led me to my problem. I have a list of morning Journal prompts, one for each of the 366 days (don't forget Leap Day) of the year. I'm always open to the best way to get this list in various tools, but the most universal path seems to be through a Javascript function. Either I host it locally, or set up a Cloud Function to return the correct prompt each day.\n\nBut in Logseq's templating language there is no meaningful way to do a `select` or `case` or any other user defined function that I could find.\n\nSo... we explore.\n\n## Option 2: Use Plugins\n\nPlugins are the typical first place a user looks when looking for enhanced functionality like this. So I did a little digging and came up with two options.\n\n### Smartblocks\n\n[Smartblocks](https://github.com/sawhney17/logseq-smartblocks) seems like it *might* be able to make this work.\n\nThere's an `if` clause it adds to templates that might suffice if I was willing to retool my JS function into this altered templating language. However, I think I would have to shove them all into the same block, and I'm pretty sure Logseq gets unhappy with blocks beyond a certain size.\n\nPlus, I would have to maintain two sets of prompt \"functions\" if I found any typos, which somehow keep cropping up in this giant JSON object I keep around.\n\n### Smart Typing\n\n[Smart Typing](https://github.com/sethyuan/logseq-plugin-smart-typing) seems like it should be able to handle this... but ultimately I couldn't figure it out. \n\nEven with an example of text replacement in gif form right in the docs, I couldn't figure out how the trigger worked. The function never seemed to fire. \n\nPlus it started to screw up normal typing after a Logseq restart. Maybe function size was another hidden problem? Maybe I needed to register the function somehow? Maybe there were more instructions in the Chinese docs I couldn't read?\n\nI can't say for sure, so I searched on.\n\n## Option 3: Use `custom.js`\n\nLogseq has the ability to add in native Javascript from a `custom.js` file in the logseq directory. \n\n... I couldn't find any official documentation for it at all. \n\nMost of the examples in the forums are people manipulating other behavior of the app rather than adding simple strings. Clearly there's some sort of merging between DOM and data that needs to happen... but I couldn't find a full explainer anywhere that would shed any light on it.\n\nWhich meant it was time to...\n\n## Option 4: Give Up and Use an `iframe`\n\nI already have a simple html page with a working prompt. Why not just embed it in an `iframe` and copy + paste the output into Logseq?\n\nDefinitely not what I would consider ideal, but given that previously I had to bounce around between different windows (and even workspaces on Chromebook... don't get me started) to get the prompt previously, this is at least a meaningful improvement.\n\n## My Wish: More Logseq Docs on the Fiddly Bits!\n\nI see all over the forums for Logseq users to avoid the fiddly parts and to stick with the simple tools. It's excellent advice, and echoes words I'm currently writing for other posts about Advanced Queries and Solutioning in Logseq. \n\n... but the Docs on how to use things which visibly pop up in menus should exist *somewhere*. Otherwise you get semi-capable users like myself wandering around lost for way longer than necessary, only to fallback on a non-ideal solution.\n\nIf anyone has any other ideas (or can point to docs I missed), shoot me an email below!","srcMarkdownNoYaml":"\n\nThere are some open source projects that are plain, simple, and describe well what they do. `curl` is the classic example (along with most Linux utilities), but [File Converter](https://file-converter.org/) is another. It does what it does, it doesn't do what it doesn't. \n\nAnd then, there is Logseq.\n\nAll I wanted to do is dynamically create some text from a javascript function that's different every day. I *feel* this is doable in there somewhere, but I'm absolutely stumped trying to connect the dots from A to B to make it happen.\n\n<!-- more -->\n\nLet's consider the options:\n\n## Option 1: Use Templates\n\nThe templating language in Logseq is pretty solid. I'm a particularly heavy user when it comes to creating my morning, evening, weekly, and monthly journal prompts. \n\nBut that was also what led me to my problem. I have a list of morning Journal prompts, one for each of the 366 days (don't forget Leap Day) of the year. I'm always open to the best way to get this list in various tools, but the most universal path seems to be through a Javascript function. Either I host it locally, or set up a Cloud Function to return the correct prompt each day.\n\nBut in Logseq's templating language there is no meaningful way to do a `select` or `case` or any other user defined function that I could find.\n\nSo... we explore.\n\n## Option 2: Use Plugins\n\nPlugins are the typical first place a user looks when looking for enhanced functionality like this. So I did a little digging and came up with two options.\n\n### Smartblocks\n\n[Smartblocks](https://github.com/sawhney17/logseq-smartblocks) seems like it *might* be able to make this work.\n\nThere's an `if` clause it adds to templates that might suffice if I was willing to retool my JS function into this altered templating language. However, I think I would have to shove them all into the same block, and I'm pretty sure Logseq gets unhappy with blocks beyond a certain size.\n\nPlus, I would have to maintain two sets of prompt \"functions\" if I found any typos, which somehow keep cropping up in this giant JSON object I keep around.\n\n### Smart Typing\n\n[Smart Typing](https://github.com/sethyuan/logseq-plugin-smart-typing) seems like it should be able to handle this... but ultimately I couldn't figure it out. \n\nEven with an example of text replacement in gif form right in the docs, I couldn't figure out how the trigger worked. The function never seemed to fire. \n\nPlus it started to screw up normal typing after a Logseq restart. Maybe function size was another hidden problem? Maybe I needed to register the function somehow? Maybe there were more instructions in the Chinese docs I couldn't read?\n\nI can't say for sure, so I searched on.\n\n## Option 3: Use `custom.js`\n\nLogseq has the ability to add in native Javascript from a `custom.js` file in the logseq directory. \n\n... I couldn't find any official documentation for it at all. \n\nMost of the examples in the forums are people manipulating other behavior of the app rather than adding simple strings. Clearly there's some sort of merging between DOM and data that needs to happen... but I couldn't find a full explainer anywhere that would shed any light on it.\n\nWhich meant it was time to...\n\n## Option 4: Give Up and Use an `iframe`\n\nI already have a simple html page with a working prompt. Why not just embed it in an `iframe` and copy + paste the output into Logseq?\n\nDefinitely not what I would consider ideal, but given that previously I had to bounce around between different windows (and even workspaces on Chromebook... don't get me started) to get the prompt previously, this is at least a meaningful improvement.\n\n## My Wish: More Logseq Docs on the Fiddly Bits!\n\nI see all over the forums for Logseq users to avoid the fiddly parts and to stick with the simple tools. It's excellent advice, and echoes words I'm currently writing for other posts about Advanced Queries and Solutioning in Logseq. \n\n... but the Docs on how to use things which visibly pop up in menus should exist *somewhere*. Otherwise you get semi-capable users like myself wandering around lost for way longer than necessary, only to fallback on a non-ideal solution.\n\nIf anyone has any other ideas (or can point to docs I missed), shoot me an email below!"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","theme":["darkly","../../custom.scss"],"title-block-banner":true,"title":"Challenges Showing Text From a Simple JS Function in Logseq","slug":"challenges-showing-text-from-a-simple-js-function-in-logseq","date":"2023-03-03T18:52:04.600Z","categories":["Technology","Personal Knowledge Management"],"description":"","summary":"","aliases":["/challenges-showing-text-from-a-simple-js-function-in-logseq"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}